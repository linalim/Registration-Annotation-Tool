{"remainingRequest":"/Users/user/Workspace/registration-annotation/node_modules/babel-loader/lib/index.js!/Users/user/Workspace/registration-annotation/node_modules/eslint-loader/index.js??ref--13-0!/Users/user/Workspace/registration-annotation/src/constants/color.js","dependencies":[{"path":"/Users/user/Workspace/registration-annotation/src/constants/color.js","mtime":1571130710149},{"path":"/Users/user/Workspace/registration-annotation/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/user/Workspace/registration-annotation/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/user/Workspace/registration-annotation/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.regexp.match\";\nimport _slicedToArray from \"/Users/user/Workspace/registration-annotation/node_modules/@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport \"core-js/modules/es6.regexp.replace\";\nexport var COLOR_MAP = {\n  \"valid line\": 'rgba(255, 0, 0, $opacity)',\n  \"region of interest\": 'rgba(0, 0, 0, 0.1)',\n  \"repeating symbol\": 'rgba(159, 39, 176, $opacity)',\n  \"don't care\": 'rgba(0, 0, 0, $opacity)'\n};\nvar DEFAULT_COLOR = 'rgba(255, 255, 255, $opacity)';\n\nfunction fetchColor(fieldName) {\n  return COLOR_MAP[fieldName] || DEFAULT_COLOR;\n}\n\nexport function colorOf(field_name) {\n  var opacity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.8;\n  return fetchColor(field_name).replace('$opacity', opacity);\n}\nexport function rgbaColorOf(field_name) {\n  var opacity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.8;\n  return fetchColor(field_name).replace('$opacity', opacity);\n}\n\nfunction channelInter(v, p) {\n  return 255 - (255 - v) * p | 0;\n}\n\nexport function rgbColorOf(field_name) {\n  var opacity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.8;\n  var color = rgbaColorOf(field_name, opacity);\n\n  var _color$match = color.match(/[0-9.]+/g),\n      _color$match2 = _slicedToArray(_color$match, 4),\n      r = _color$match2[0],\n      g = _color$match2[1],\n      b = _color$match2[2],\n      per = _color$match2[3];\n\n  var diff = Number(per);\n  return \"rgb(\".concat(channelInter(Number(r), diff), \",\").concat(channelInter(Number(g), diff), \",\").concat(channelInter(Number(b), diff), \")\");\n}",{"version":3,"sources":["/Users/user/Workspace/registration-annotation/src/constants/color.js"],"names":["COLOR_MAP","DEFAULT_COLOR","fetchColor","fieldName","colorOf","field_name","opacity","replace","rgbaColorOf","channelInter","v","p","rgbColorOf","color","match","r","g","b","per","diff","Number"],"mappings":";;;;AACA,OAAO,IAAMA,SAAS,GAAG;AACvB,gBAAc,2BADS;AAEvB,wBAAsB,oBAFC;AAGvB,sBAAoB,8BAHG;AAIvB,gBAAc;AAJS,CAAlB;AAOP,IAAMC,aAAa,GAAG,+BAAtB;;AAEA,SAASC,UAAT,CAAoBC,SAApB,EAA+B;AAC7B,SAAOH,SAAS,CAACG,SAAD,CAAT,IAAwBF,aAA/B;AACD;;AAED,OAAO,SAASG,OAAT,CAAiBC,UAAjB,EAA4C;AAAA,MAAfC,OAAe,uEAAL,GAAK;AACjD,SAAOJ,UAAU,CAACG,UAAD,CAAV,CAAuBE,OAAvB,CAA+B,UAA/B,EAA2CD,OAA3C,CAAP;AACD;AAED,OAAO,SAASE,WAAT,CAAqBH,UAArB,EAAgD;AAAA,MAAfC,OAAe,uEAAL,GAAK;AACrD,SAAOJ,UAAU,CAACG,UAAD,CAAV,CAAuBE,OAAvB,CAA+B,UAA/B,EAA2CD,OAA3C,CAAP;AACD;;AAED,SAASG,YAAT,CAAsBC,CAAtB,EAAyBC,CAAzB,EAA4B;AAC1B,SAAO,MAAM,CAAC,MAAMD,CAAP,IAAYC,CAAlB,GAAsB,CAA7B;AACD;;AAED,OAAO,SAASC,UAAT,CAAoBP,UAApB,EAA+C;AAAA,MAAfC,OAAe,uEAAL,GAAK;AACpD,MAAIO,KAAK,GAAGL,WAAW,CAACH,UAAD,EAAaC,OAAb,CAAvB;;AADoD,qBAE7BO,KAAK,CAACC,KAAN,CAAY,UAAZ,CAF6B;AAAA;AAAA,MAE7CC,CAF6C;AAAA,MAE1CC,CAF0C;AAAA,MAEvCC,CAFuC;AAAA,MAEpCC,GAFoC;;AAIpD,MAAMC,IAAI,GAAGC,MAAM,CAACF,GAAD,CAAnB;AAEA,uBAAeT,YAAY,CAACW,MAAM,CAACL,CAAD,CAAP,EAAWI,IAAX,CAA3B,cAAgDV,YAAY,CAACW,MAAM,CAACJ,CAAD,CAAP,EAAWG,IAAX,CAA5D,cAAiFV,YAAY,CAACW,MAAM,CAACH,CAAD,CAAP,EAAWE,IAAX,CAA7F;AAED","sourcesContent":["\nexport const COLOR_MAP = {\n  \"valid line\": 'rgba(255, 0, 0, $opacity)',\n  \"region of interest\": 'rgba(0, 0, 0, 0.1)',\n  \"repeating symbol\": 'rgba(159, 39, 176, $opacity)',\n  \"don't care\": 'rgba(0, 0, 0, $opacity)'\n}\n\nconst DEFAULT_COLOR = 'rgba(255, 255, 255, $opacity)'\n\nfunction fetchColor(fieldName) {\n  return COLOR_MAP[fieldName] || DEFAULT_COLOR\n}\n\nexport function colorOf(field_name, opacity = 0.8) {\n  return fetchColor(field_name).replace('$opacity', opacity)\n}\n\nexport function rgbaColorOf(field_name, opacity = 0.8) {\n  return fetchColor(field_name).replace('$opacity', opacity)\n}\n\nfunction channelInter(v, p) {\n  return 255 - (255 - v) * p | 0\n}\n\nexport function rgbColorOf(field_name, opacity = 0.8) {\n  let color = rgbaColorOf(field_name, opacity)\n  const [r, g, b, per] = color.match(/[0-9.]+/g)\n\n  const diff = Number(per)\n\n  return `rgb(${ channelInter(Number(r),diff) },${channelInter(Number(g),diff) },${channelInter(Number(b),diff)})`\n\n}\n"]}]}